---
- name: VBox | Create Directory for ISOs
  file:
    path: "{{ path_images_iso }}"
    state: directory
    owner: "{{ asir_user }}"
    group: "{{ asir_user }}"
    mode: 0755
  
- name: VBox | Create Directory for VMs
  file:
    path: "{{ default_path_vms }}"
    state: directory
    owner: "{{ asir_user }}"
    group: "{{ asir_user }}"
    mode: 0755

- name: VBox | Check if ISOs exists
  stat:
    path: "{{ item.path }}"
  register: iso_exists
  failed_when: not iso_exists.stat.exists
  with_items:
    - "{{ images_iso }}"
  ignore_errors: true

- name: VBox | Download ISO Images
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.path }}"
  with_items:
    - "{{ images_iso }}"
  when: not iso_exists is defined or iso_exists is failed

- name: VBox | Check if Custom ISOs exists
  stat:
    path: "{{ item.dest }}"
  register: custom_iso_exists
  failed_when: not iso_exists.stat.exists
  with_items:
    - "{{ images_iso }}"
  ignore_errors: true
  when: custom_images is defined

- name: VBox | Copy custom images
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop: "{{ custom_images }}"
  when: custom_iso_exists is defined and custom_iso_exists is failed

- name: "VBox | Check if VMs already exists"
  shell: "vboxmanage showvminfo {{ item.name }}"
  register: vms_exists
  failed_when: vms_exists.rc != 0
  ignore_errors: True
  loop: "{{ vm_options }}"
  become_user: "{{ asir_user }}"

- name: "VBox | Create VMs"
  vars:
    name: "{{ item.name | default('VM_Default') }}"
    os_type: "{{ item.os_type | default('Ubuntu_64') }}"
    ram: "{{ item.ram | default(2048) }}"
    cpus: "{{ item.cpus | default(2) }}"
    disk_size: "{{ item.disk_size | default(20480) }}"
    disk_path: "{{ item.disk_path | default('{{ default_path_vms }}/VM_Default') }}"
    disk_format: "{{ item.disk_format | default('VDI') }}"
    net_type: "{{ item.net_type | default('bridged') }}"
    bridgeadapter: "{{ item.bridgeadapter | default('enp0s3') }}"
    vram: "{{ item.vram | default(128) }}"
    iso_path: "{{ item.iso_path }}" #required
  shell: |
    vboxmanage createvm --name "{{ name }}" --ostype "{{ os_type }}" --register
    vboxmanage modifyvm "{{ name }}" \
    --memory "{{ ram }}" \
    --cpus "{{ cpus }}" \
    --nic1 "{{ net_type }}" \
    --bridgeadapter1 "{{ bridgeadapter }}" \
    --vram "{{ vram }}" \
    --draganddrop bidirectional \
    --clipboard bidirectional \
    --boot1 dvd \
    --boot2 disk \
    --boot3 none \
    --boot4 none
    vboxmanage createmedium disk --filename "{{ disk_path }}" --size "{{ disk_size }}" --format "{{ disk_format }}" --variant Standard
    vboxmanage storagectl "{{ name }}" --name "SATA Controller" --add sata --bootable on
    vboxmanage storagectl "{{ name }}" --name "IDE Controller" --add ide --bootable on
    vboxmanage storageattach "{{ name }}" --storagectl "SATA Controller" --port 0 --device 0 --type hdd --medium "{{ disk_path }}.vdi"
    vboxmanage storageattach "{{ name }}" --storagectl "IDE Controller" --port 0 --device 0 --type dvddrive --medium "{{ iso_path }}"
  become_user: "{{ asir_user }}"
  loop: "{{ vm_options }}"
  when: vms_exists is failed or not vms_exists.changed

